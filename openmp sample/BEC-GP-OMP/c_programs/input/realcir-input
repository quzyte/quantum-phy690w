#
# BEC-GP-OMP codes are developed and (c)opyright-ed by:
#
# Luis E. Young-S., Sadhan K. Adhikari
# (UNESP - Sao Paulo State University, Brazil)
#
# Paulsamy Muruganandam
# (Bharathidasan University, Tamil Nadu, India)
#
# Dusan Vudragovic, Antun Balaz
# (Scientific Computing Laboratory, Institute of Physics Belgrade, Serbia)
#
# Public use and modification of this code are allowed provided that the
# following three papers are cited:
#
# [1] L. E. Young-S. et al., Comput. Phys. Commun. 204 (2016) 209. 
# [2] P. Muruganandam, S. K. Adhikari, Comput. Phys. Commun. 180 (2009) 1888.
# [3] D. Vudragovic et al., Comput. Phys. Commun. 183 (2012) 2021.
#
# The authors would be grateful for all information and/or comments
# regarding the use of the code.
#

# Parameter input file for solving the time-independent Gross–Pitaevskii nonlinear
# partial differential equation in two space dimensions in a circularly-symmetric
# trap by real time propagation using split-step Crank-Nicolson method.

#  Type of rescaling of Gross–Pitaevskii equation.
#  Possible values: 1 or 2.
#  Required: yes
#  Type: int
   OPTION = 2

#  Number of atoms in condensate.
#  Required: yes
#  Type: long
   NATOMS = 400

#  Coefficient of the nonlinear term. If not defined, G_CIR is calculated as
#     G_CIR = (4 * Pi * AS * NATOMS * a0) / (SQRT(2 * PI) * D_Z)
#  where AS is contact interaction strength, NATOMS number of atoms 
#  in condensate, a0 Bohr radius and D_Z the axial gaussian width.
#  Required: no
#  Type: double
#   G_CIR = 12.5484

#  Coefficient that multiplies nonlinear term in non-stationary problem during
#  NPAS and final NRUN iterations.
#  Required: yes
#  Type: double
   GPAR = 0.5
   
#  Unit of length. Required if G_CIR is not defined.
#  Required: conditionally
#  Type: double
   AHO = 1.e-6

#  Contact interaction strength in units of Bohr radius. 
#  Required if G_CIR is not defined.
#  Required: conditionally
#  Type: double
   AS = 118.2516754
   
#  Axial Gaussian Width = l/SQRT(LAMBDA)
#  Required: yes
#  Type: double
   D_Z = 1.  

#  Number of discretization points in the r-direction.
#  Required: yes
#  Type: long
   NR = 2000

#  Spatial discretization step in the r-direction.
#  Required: yes
#  Type: double
   DR = 0.01

#  Time discretization step.
#  Required: yes
#  Type: double
   DT = 0.0001

#  Number of iterations to introduce the nonlinearity G_CIR.
#  If NSTP = 0, the program need to read the density file: imagcir-den.txt
#  Required: yes
#  Type: long
   NSTP = 1000000

#  Number of subsequent iterations with fixed nonlinearity G_CIR.
#  Required: yes
#  Type: long
   NPAS = 100

#  Number of final iterations with fixed nonlinearity GPAR * G_CIR.
#  Required: yes
#  Type: long
   NRUN = 40000

#  Output file with the summary of final values of all physical quantities.
#  If not defined, standard output will be used.
#  Required: no
#  Type: string
   OUTPUT = realcir-out
  
#  Output file with RMS values during the time evolution. The values 
#  are written in subsequent NPAS and final NRUN iterations. 
#  Required: no
#  Type: string
   DYNAOUT = realcir-dyna  

#  Output file with the initial wave function. 
#  If not defined, the initial wave function will not be saved.
#  Required: no
#  Type: string
#   INITOUT = realcir-den-init

#  Output file with the wave function obtained after the first NSTP iterations, 
#  which introduce nonlinearity G_CIR. 
#  If not defined, the wave function will not be saved.
#  Required: no
#  Type: string
#   NSTPOUT = realcir-nstp

#  Output file with the wave function obtained after the subsequent NPAS
#  iterations, with the fixed nonlinearity G_CIR. 
#  If not defined, the wave function will not be saved.
#  Required: no
#  Type: string
   NPASOUT = realcir-den
    
#  Output file with the final wave function obtained after the final NRUN
#  iterations. If not defined, the wave function will not be saved.
#  Required: no
#  Type: string
#   NRUNOUT = realcir-den-nrun

#  Discretization step in the r-direction used to save wave functions. 
#  Required if any of wave function output files (INITOUT, NSTPOUT, 
#  NPASOUT, NRUNOUT) is defined.
#  Required: conditionally
#  Type: long
   OUTSTPR = 1

#  Time discretization step used to save RMS of the wave function. 
#  Required if DYNAOUT is defined.
#  Required: conditionally
#  Type: long
   OUTSTPT = 100
